# =============================================================================
# SQINT CONFIGURATION
# =============================================================================
# Configuration file for sqint - a static SQL analysis tool
# This file controls how sqint detects, processes, and analyzes SQL queries
# in your codebase for potential issues and improvements.

# =============================================================================
# DETECTION SETTINGS
# =============================================================================
# These settings control how sqint identifies SQL code within your files

# Variable names to look for and analyze SQL within (supports wildcards with *)
# If empty, sqint will not analyze any variables
# Examples: "query", "*sql*", "database_*", "stmt"
variable_contexts = [
    "*query*",
    "*sql*", 
    "*statement*",
    "*stmt*",
]

# Function names to analyze SQL within (supports wildcards with *)
# If empty, sqint will not analyze any functions
# Examples: "execute_query", "run_*", "*_sql"
function_contexts = []

# =============================================================================
# FILE PROCESSING
# =============================================================================
# These settings control which files sqint will process

# File patterns to include in analysis (supports glob patterns)
# Add patterns for the file types you want to analyze
file_patterns = [
    "*.py",        # Python files
    "*.pyi",       # Python interface files
    "*.ipynb",     # Jupyter notebooks
]

# File name patterns to exclude from analysis (supports glob patterns)
# Use this to skip test files, directiories, etc. that you don't want analyzed
exclude_patterns = [
    # "*test*",
    # "*/migrations/*",
    # "*/generated/*",
]

# Whether to respect .gitignore files when scanning for files
respect_gitignore = true

# Whether to respect global .gitignore files (~/.gitignore_global)
respect_global_gitignore = false

# Whether to respect .git/info/exclude files
respect_git_exclude = true

# Whether to include hidden files (starting with .) in analysis
# Usually not needed unless you have SQL in hidden configuration files
include_hidden_files = false

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================
# These settings control how sqint utilizes system resources

# Enable parallel processing for faster analysis of large codebases
parallel_processing = true

# Maximum number of worker threads to use for parallel processing
# 0 = auto-detect based on CPU cores (recommended)
# Set to a specific number to limit resource usage
max_threads = 0

# =============================================================================
# INCREMENTAL MODE
# =============================================================================
# These settings enable analyzing only changed files for faster subsequent runs

# Only analyze files that have changed since the last run
# Requires git repository and significantly speeds up analysis on large codebases
incremental_mode = false

# Git branch to compare against when using incremental mode
# Typically "main", "master", or "develop" depending on your workflow
baseline_branch = "main"

# Include staged but uncommitted changes in incremental analysis
# Useful for pre-commit hooks and continuous integration
include_staged = true

# =============================================================================
# OUTPUT SETTINGS
# =============================================================================
# These settings control the verbosity and format of sqint's output

# Logging level for output control
# Options: "always", "error", "warn", "info", "debug", "trace"
# - "always": Not recommended: only contains the most general information.
# - "error": Recommended: Shows errors + always in sql scripts (errors in stderr)
# - "warn": Optional: Show warnings + error (warnings don't go to stderr)
# - "info": Not recommended: Show detailed information + warn
# - "bail": For development: Info + not implemented parsing paths
# - "debug": For debugging: Show bail + function entries and exits (very verbose)
loglevel = "error"

# =============================================================================
# SQL PARSING SETTINGS
# =============================================================================
# These settings control how sqint parses and validates SQL syntax

# SQL dialect to use for parsing and validation
# Options: "generic", "mysql", "postgres", "sqlite", "mssql", "oracle",
#          "bigqueury", "snowflake", "redshift", "clickhouse", "duckdb", 
#          "hive", "ansi"
# Use "generic" for multi-database compatibility or specify your database
dialect = "generic"

# Parameter markers that will be recognized in SQL queries
# These are placeholders that get replaced with actual values at runtime
# The parser will temporarily fill these with parsable values
param_markers = [
    "?",           # Standard SQL parameter marker
    # "$1", "$2",   # PostgreSQL-style parameters
    # "@param",     # Named parameters
]

# String mappings to normalize SQL dialect differences
# This helps sqint understand database-specific syntax variations
# Recommended for handling implementation specific syntax
# Or for handling multiple dialect codebases
[dialect_mappings]
# "NOTNULL" = "NOT NULL"     # Common shorthand to standard SQL
# "ISNULL" = "IS NULL"       # Common shorthand to standard SQL
# "LIMIT 1" = "ROWNUM = 1" # Oracle-style mapping
