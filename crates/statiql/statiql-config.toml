# Variable names to look for and analyze
variable_contexts= [
    "*query*",
    "*sql*", 
    "*stmt*", 
]

# Function names with arguments to validate for (methods and functions that execute SQL)
function_contexts = [
    "fetchall",
    "execute", 
    "fetchone",
    "select",
    "fetch_records"
]

# Class names to parse through
class_contexts = [
    "fetchall",
    "execute", 
    "fetchone",
    "select",
    "fetch_records"
]

# Keyword parameter names to look for in function calls
kw_param_names = [
    "query",
    "sql", 
    "select"
]

# Directories to look through for files matching `file_patterns`
targets = ["."]

# File patterns to look for in the specified `targets`
file_patterns = [
    "*.py",
    "*.pyi", 
    "*.ipynb",
]

# File name patterns to exclude from analysis
exclude_patterns = []

# Minimum string length of an sql string to analyse
min_sql_length = 10

# Whether file matching will respect git ignore
respect_gitignore = false

loglevel = "bail"

# =============================================================================
# INCREMENTAL MODE
# =============================================================================

# Only analyze files changed since last run (requires git)
incremental_mode = false

# Git branch to compare against for incremental mode
baseline_branch = "master"

# Include staged but uncommitted changes in incremental mode
include_staged = true

# Enable parallel processing for better performance
parallel_processing = true

# Maximum number of worker threads (0 = auto-detect based on CPU cores)
max_threads = 0

# Number of files to process per thread batch
thread_chunk_size = 1

# Placeholders that will be replaced with values for SQL parsing
param_markers = [
    "?",
]
# String mappings to fix common SQL dialect differences
[dialect_mappings]
"NOTNULL" = "NOT NULL"
"ISNULL" = "IS NULL"
