# Variable names to look for and analyze
variable_contexts= [
    "_query",
    "_sql", 
    "query",
    "sql",
    "statement",
    "cmd",
    "command",
    "_sql",
    "sql_query",
    "db_query",
    "select_query",
    "insert_query",
    "update_query",
    "delete_query",
    "is_query",
    "complex_select",
    "setup_query",
    "log_sql",
    "stats_query",
    "inactive_query",
    "cleanup_sql",
    "stats_update",
    "update_sql",
    "analytics_query",
    "postgres_sql",
    "mysql_query",
    "sqlite_sql",
    "create_table_statement",
    "alter_table_cmd",
    "drop_table_sql",
    "create_index_command",
    "create_procedure_sql",
    "create_function_statement",
    "create_trigger_sql",
    "create_view_statement",
    "dynamic_sql",
    ".*dangerous_query.*",
    "formatted_sql",
    "templated_sql",
    "safe_sql",
    "named_param_query",
    "dict_param_sql",
    "transaction_sql",
    "union_sql",
    "subquery_sql",
    "recursive_cte_sql",
    "pivot_sql",
    "error_select_query",
    "error_insert_sql",
    "error_update_statement",
    "error_delete_cmd",
    "missing_comma_sql",
    "missing_paren_query",
    "missing_quote_statement",
    "missing_semicolon_sql",
    "unmatched_paren1_sql",
    "unmatched_paren2_query",
    "invalid_column_sql",
    "ambiguous_column_query",
    "insert_sql",
    "update_statement",
    "batch_update_sql",
    "activity_sql",
    "insert_query",
    "update_query",
    "delete_query",
    "select_all",
    "select_by_id",
    "batch_sql",
    "sql_query_map",
    "analytics_query",
    "get_count_sql",
    "get_recent_query",
    "count_sql_list",
    "truncate_statements",
    "create_sql",
    "select_active_query",
    "select_by_role_sql",
    "update_last_login",
    "deactivate_statement",
    "create_table_sql",
    "select_published",
    "select_by_author_sql",
    "select_featured_query",
    "update_view_count",
    "search_sql",
    "unicode_sql",
    "escape_chars_query",
    "newline_sql",
    "tab_query",
    "comment_sql",
    "comment_sql_2",
    "vulnerable_sql",
    "injection_cmd",
    "bool_injection",
    "time_injection",
    "error_injection",
    "dangerous_dynamic",
    "file_inclusion_sql",
    "outfile_sql",
    "unsafe_sql_1",
    "unsafe_sql_2",
    "empty_sql",
    "none_sql",
    "whitespace_query",
    "very_long_sql",
    "escaped_quotes_sql",
    "special_chars_query",
    "mixed_case_sql",
    "weird_spacing_query",
    "json_sql",
    "window_function_sql",
    "sql_list",
    "table_counts",
    "sql_generator",
    "cleanup_sql_set",
    "risky_sql",
    "rollback_sql",
    "debug_sql",
    "format_sql",
    "batch_sql",
    "oracle_sql",
    "sqlserver_query",
    "postgres_array_sql",
    "analysis_sql",
    "regex_sql",
    "real_sql_queries",
    "mixed_data",
    "comprehensive_sql",
   "prod_sql",
    "nonprod_sql",
    "csp_sql",
    "customer_ids",
    "backup_name",
    "idx",
    "dangerous_query"
]

# Function names with arguments to validate for (methods and functions that execute SQL)
function_contexts = [
    "fetchall",
    "execute", 
    "fetchone",
    "select",
    "fetch_records"
]

# Class names to parse through
class_contexts = [
    "fetchall",
    "execute", 
    "fetchone",
    "select",
    "fetch_records"
]

context_match_mode = "regex"

# Keyword parameter names to look for in function calls
kw_param_names = [
    "query",
    "sql", 
    "select"
]

# Directories to look through for files matching `file_patterns`
targets = ["."]

# File patterns to look for in the specified `targets`
file_patterns = [
    "*.py",
    "*.pyi", 
    "*.ipynb",
]

# File name patterns to exclude from analysis
exclude_patterns = []

# Contexts to exclude from analysis TODO: Specify a manual reference link
ignore_contexts = []

# Minimum string length of an sql string to analyse
min_sql_length = 10

# Whether contexts (function names, variable names...) are case-sensitive
case_sensitive = false

# Verbose output will include all levels of information except for debug information
verbose = false

# Quiet output will ignore 
quiet = false

# Whether file matching will respect git ignore
respect_gitignore = true

debug = true


# Enable parallel processing for better performance
parallel_processing = true

# Maximum number of worker threads (0 = auto-detect based on CPU cores)
max_threads = 0

# Number of files to process per thread batch
thread_chunk_size = 1
